#!/usr/bin/env python3
"""
Script para popular o banco de dados MongoDB com dados dos arquivos CSV
"""

import pandas as pd
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Carrega o .env da API para ter acesso √†s mesmas configura√ß√µes
# Isso assume que o seeder √© executado a partir do diret√≥rio raiz do projeto
# ou que o .env est√° no mesmo n√≠vel do diret√≥rio do seeder.
dotenv_path = Path(__file__).resolve().parents[1] / '.env'
load_dotenv(dotenv_path=dotenv_path)

# Agora podemos importar as settings, que ser√£o preenchidas pelo .env
from app.config.settings import settings

class SeedDatabase:
    """
    Classe para popular o banco de dados MongoDB com dados de arquivos CSV.
    """
    def __init__(self):
        """Inicializa a classe, carregando as configura√ß√µes do MongoDB."""
        self.mongodb_url = settings.MONGODB_URL
        self.mongodb_db = settings.MONGODB_DB
        self.mongodb_username = settings.MONGODB_USERNAME
        self.mongodb_password = settings.MONGODB_PASSWORD
        self.mongodb_auth_source = settings.MONGODB_AUTH_SOURCE
        self.client = None
        self.db = None
        self.datasets_path = Path(__file__).parent / 'datasets'

    def get_connection_string(self) -> str:
        """Gera a string de conex√£o do MongoDB com base nas configura√ß√µes."""
        url = self.mongodb_url.replace("mongodb://", "")
        if self.mongodb_username and self.mongodb_password:
            return (
                f"mongodb://{self.mongodb_username}:{self.mongodb_password}@"
                f"{url}"
            )
        return f"mongodb://{url}"

    def connect(self):
        """Estabelece conex√£o com o banco de dados MongoDB."""
        try:
            connection_string = self.get_connection_string()
            print(f"üîå Conectando ao MongoDB...")
            self.client = MongoClient(
                connection_string,
                authSource='admin'
            )
            self.db = self.client[self.mongodb_db]
            # Testa a conex√£o
            self.client.admin.command('ping')
            print("‚úÖ Conex√£o com o MongoDB estabelecida com sucesso!")
        except ConnectionFailure as e:
            print(f"‚ùå Erro de conex√£o com o MongoDB: {e}")
            sys.exit(1)
        except OperationFailure as e:
            print(f"‚ùå Erro de autentica√ß√£o no MongoDB: {e}")
            print("   Verifique as credenciais e o 'authSource'.")
            sys.exit(1)

    def disconnect(self):
        """Fecha a conex√£o com o banco de dados."""
        if self.client:
            self.client.close()
            print("üîå Conex√£o com o MongoDB fechada.")

    def get_csv_files(self) -> list[Path]:
        """Obt√©m a lista de arquivos CSV do diret√≥rio de datasets."""
        if not self.datasets_path.exists():
            print(f"‚ö†Ô∏è  Diret√≥rio de datasets n√£o encontrado: {self.datasets_path}")
            return []
        
        csv_files = list(self.datasets_path.glob("*.csv"))
        print(f"üìÅ Encontrados {len(csv_files)} arquivos CSV para importa√ß√£o.")
        return csv_files

    def seed_data(self):
        """L√™ os arquivos CSV e insere os dados no MongoDB."""
        self.connect()
        csv_files = self.get_csv_files()

        if not csv_files:
            print("Nenhum dado para popular. Encerrando.")
            self.disconnect()
            return

        for file_path in csv_files:
            try:
                collection_name = file_path.stem
                print(f"\nüîÑ Processando arquivo: {file_path.name} -> Cole√ß√£o: '{collection_name}'")
                
                df = pd.read_csv(file_path, sep=';', encoding='latin1')
                
                # Limpa os nomes das colunas
                df.columns = df.columns.str.strip()
                
                # Converte o dataframe para uma lista de dicion√°rios
                data = df.to_dict(orient='records')
                
                if not data:
                    print(f"üìÑ Arquivo {file_path.name} est√° vazio. Pulando.")
                    continue

                collection = self.db[collection_name]
                
                # Limpa a cole√ß√£o antes de inserir novos dados
                print(f"üóëÔ∏è  Limpando a cole√ß√£o '{collection_name}'...")
                collection.delete_many({})
                
                # Insere os novos dados
                print(f"‚ûï Inserindo {len(data)} documentos na cole√ß√£o '{collection_name}'...")
                collection.insert_many(data)
                print(f"‚úÖ Dados do arquivo {file_path.name} inseridos com sucesso.")

            except FileNotFoundError:
                print(f"‚ùå Erro: Arquivo {file_path} n√£o encontrado.")
            except Exception as e:
                print(f"‚ùå Ocorreu um erro ao processar o arquivo {file_path.name}: {e}")

        self.disconnect()

if __name__ == '__main__':
    seeder = SeedDatabase()
    seeder.seed_data() 