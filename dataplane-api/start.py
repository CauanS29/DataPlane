#!/usr/bin/env python3
"""
Script de inicializa√ß√£o da DataPlane API
"""

import os
import sys
import subprocess
from pathlib import Path


def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")


def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ["logs", "models/checkpoint"]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado: {directory}")


def install_dependencies():
    """Instala as depend√™ncias"""
    try:
        print("üì¶ Instalando depend√™ncias...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        sys.exit(1)


def setup_environment():
    """Configura o ambiente"""
    env_file = Path(".env")
    env_example = Path("env.example")
    
    if not env_file.exists() and env_example.exists():
        print("üîß Configurando vari√°veis de ambiente...")
        with open(env_example, 'r') as f:
            content = f.read()
        
        with open(env_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ Arquivo .env criado. Edite as configura√ß√µes conforme necess√°rio.")
        print("‚ö†Ô∏è  IMPORTANTE: Configure o API_TOKEN e as credenciais do MongoDB no arquivo .env")
    elif env_file.exists():
        print("‚úÖ Arquivo .env j√° existe")
    else:
        print("‚ö†Ô∏è  Arquivo env.example n√£o encontrado")


def check_mongodb():
    """Verifica se o MongoDB est√° rodando"""
    try:
        import pymongo
        from dotenv import load_dotenv
        
        # Carrega vari√°veis de ambiente
        load_dotenv()
        
        # Tenta conectar com as credenciais da aplica√ß√£o
        username = os.getenv("MONGODB_USERNAME")
        password = os.getenv("MONGODB_PASSWORD")
        
        if username and password:
            # Conecta com autentica√ß√£o
            connection_string = f"mongodb://{username}:{password}@localhost:27017/dataplane?authSource=admin"
            client = pymongo.MongoClient(connection_string, serverSelectionTimeoutMS=2000)
        else:
            # Conecta sem autentica√ß√£o (para desenvolvimento)
            client = pymongo.MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=2000)
        
        client.admin.command('ping')
        print("‚úÖ MongoDB est√° rodando e acess√≠vel")
        client.close()
        return True
        
    except Exception as e:
        print("‚ö†Ô∏è  MongoDB n√£o est√° rodando ou n√£o est√° acess√≠vel")
        print(f"   Erro: {e}")
        print("üí° Para iniciar MongoDB com Docker:")
        print("   python setup_mongodb.py")
        print("   ou")
        print("   docker-compose up -d mongodb")
        return False


def start_server():
    """Inicia o servidor"""
    print("üöÄ Iniciando DataPlane API...")
    print("üìñ Documenta√ß√£o dispon√≠vel em: http://localhost:8000/docs")
    print("üîç Health check em: http://localhost:8000/api/v1/health")
    print("‚èπÔ∏è  Pressione Ctrl+C para parar o servidor")
    print("-" * 50)
    
    try:
        subprocess.run([sys.executable, "main.py"])
    except KeyboardInterrupt:
        print("\nüëã Servidor encerrado")


def main():
    """Fun√ß√£o principal"""
    print("=" * 50)
    print("ü§ñ DataPlane API - Setup e Inicializa√ß√£o")
    print("=" * 50)
    
    # Verifica vers√£o do Python
    check_python_version()
    
    # Cria diret√≥rios
    create_directories()
    
    # Configura ambiente
    setup_environment()
    
    # Instala depend√™ncias se requirements.txt existir
    if Path("requirements.txt").exists():
        install_dependencies()
    else:
        print("‚ö†Ô∏è  Arquivo requirements.txt n√£o encontrado")
    
    # Verifica MongoDB
    check_mongodb()
    
    # Inicia o servidor
    start_server()


if __name__ == "__main__":
    main() 